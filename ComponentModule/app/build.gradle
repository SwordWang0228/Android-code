apply plugin: 'com.android.application'

//赋值引用
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
def url = rootProject.ext.url

android {
    compileSdkVersion androidId.compileSdkVersion

    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        //配置组件化标志
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        //在gradle文件中配置选项参数（用于APT传参接收） 必须在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }

    }


    buildTypes {
        debug {
            buildConfigField("String", "SERVER_API", "\"${url.debug}\"")
        }
        release {
            minifyEnabled false
            buildConfigField("String", "SERVER_API", "\"${url.release}\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //引入第三方依赖
    support.each { k, v -> implementation v }
    //引入公共基础库
    implementation project(':library')
    //注解处理器触发
    annotationProcessor project(':compiler')
    //组件化配置
    if (isRelease) {
        implementation project(':order')
        implementation project(':personal')
    }
}
